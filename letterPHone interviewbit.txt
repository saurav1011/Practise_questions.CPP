string checkMapping(int A){
    if(A == '0'){
        return "0";
    }
    else if(A == '1'){
        return "1";
    }
    else if(A == '2'){
        return "abc";
    }
    else if(A == '3'){
        return "def";
    }
    else if(A == '4'){
        return "ghi";
    }
    else if(A == '5'){
        return "jkl";
    }
    else if(A == '6'){
        return "mno";
    }
    else if(A == '7'){
        return "pqrs";
    }
    else if(A == '8'){
        return "tuv";
    }
    else if(A == '9'){
        return "wxyz";
    }
    return "";
}

void rec(vector<string> values, vector<string>& sol, string s, int i, int j){
    int size = values.size();
    if(i == values.size()){
        sol.push_back(s);
        return;
    }
    s = s + "1";
    for(; j < values[i].size(); j++){
        s[s.size()-1] = values[i][j];
        rec(values, sol, s, i+1, 0);
    }
}

vector<string> Solution::letterCombinations(string A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    
    
    vector<string> sol;
    vector<string> values;
    
    for(int i = 0; i < A.size(); i++){
        values.push_back(checkMapping(A[i]));
    }
    rec(values, sol, "", 0, 0);
    
    return sol;
   /////////////////


string numtos(int p){
    string sol="";
    if(p/10==0){
        if(p==0||p==1){
            sol=(to_string(p));
        }
        if(p==2){
            sol="abc";
        }
        if(p==3){
            sol="def";
        }
        if(p==4){
            sol="ghi";
        }
        if(p==5){
            sol="jkl";
        }
        if(p==6){
            sol="mno";
        }
        if(p==7){
            sol="pqrs";
        }
        if(p==8){
            sol="tuv";
        }
        if(p==9){
            sol="wxyz";
        }
    }
    return sol;
}
vector <string> mapntn(int x,int y){
    string X=numtos(x);
    string Y=numtos(y);
    vector<int>sol;
    int m=X.length();
    int n=Y.length();
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            string s=X[i].append(Y[j]);
            sol.push_back(s);
        }
    }
    return sol;
}

vector<string> Solution::letterCombinations(string A) {
    int a=stoi(A);
    vector<int>num;
    while(a!=0){
        num.push_back(a%10);
        a=a/10;
    }
    for(int i=0;i<num.size();i++){
        num[i]=num[num.size()-1-i];
    }
    int n=num.size();
    vector<string>list;
    queue<string>q;
    q.push("");
    while(!q.empty()){
        string s=q.front();
        q.pop();
        if (s.length() == n) 
            list.push_back(s); 
        else
  
            // Try all possible letters for current digit 
            // in number[] 
            for (auto letter : table[number[s.length()]]) 
                q.push(s + letter); 
    } 
  
    // Return the generated list 
    return list; 
}
    }
    
    
    
}

